(set-option :fp.engine spacer)

; SMT-LIBv2 description generated by Yosys 0.8+598 (git sha1 becd98cc, gcc 7.4.0-1ubuntu1~18.04.1 -fPIC -Os)
; yosys-smt2-stdt
; yosys-smt2-module cnt
(declare-datatype |cnt_s| ((|cnt_mk|
  (|cnt_is| Bool)
  (|cnt#0| (_ BitVec 15)) ; \addr
  (|cnt#1| (_ BitVec 15)) ; \base
  (|cnt#2| Bool) ; \clk
  (|cnt#3| (_ BitVec 15)) ; \cnt
  (|cnt#4| Bool) ; \en
  (|cnt#5| (_ BitVec 15)) ; \inp
  (|cnt#6| Bool) ; \rst
)))
; yosys-smt2-output addr 15
; yosys-smt2-register addr 15
(define-fun |cnt_n addr| ((state |cnt_s|)) (_ BitVec 15) (|cnt#0| state))
; yosys-smt2-output base 15
; yosys-smt2-register base 15
(define-fun |cnt_n base| ((state |cnt_s|)) (_ BitVec 15) (|cnt#1| state))
; yosys-smt2-input clk 1
; yosys-smt2-clock clk posedge
(define-fun |cnt_n clk| ((state |cnt_s|)) Bool (|cnt#2| state))
; yosys-smt2-output cnt 15
; yosys-smt2-register cnt 15
(define-fun |cnt_n cnt| ((state |cnt_s|)) (_ BitVec 15) (|cnt#3| state))
; yosys-smt2-input en 1
(define-fun |cnt_n en| ((state |cnt_s|)) Bool (|cnt#4| state))
; yosys-smt2-input inp 15
(define-fun |cnt_n inp| ((state |cnt_s|)) (_ BitVec 15) (|cnt#5| state))
; yosys-smt2-input rst 1
(define-fun |cnt_n rst| ((state |cnt_s|)) Bool (|cnt#6| state))
(define-fun |cnt#7| ((state |cnt_s|)) Bool (= (|cnt#1| state) #b100000000000000)) ; $eq$cnt.v:20$8_Y
(define-fun |cnt#8| ((state |cnt_s|)) Bool (= (|cnt#0| state) #b000000000000001)) ; $eq$cnt.v:20$9_Y
(define-fun |cnt#9| ((state |cnt_s|)) Bool (and (or  (|cnt#7| state) false) (or  (|cnt#8| state) false))) ; $logic_and$cnt.v:20$10_Y
(define-fun |cnt#10| ((state |cnt_s|)) Bool (= (|cnt#3| state) #b000000000000001)) ; $eq$cnt.v:20$11_Y
(define-fun |cnt#11| ((state |cnt_s|)) Bool (and (or  (|cnt#9| state) false) (or  (|cnt#10| state) false))) ; $logic_and$cnt.v:20$12_Y
(define-fun |cnt#12| ((state |cnt_s|)) Bool (not (or  (|cnt#11| state) false))) ; $logic_not$cnt.v:20$13_Y
; yosys-smt2-assert 0 cnt.v:20
(define-fun |cnt_a 0| ((state |cnt_s|)) Bool (or (|cnt#12| state) (not true))) ; $assert$cnt.v:20$14
(define-fun |cnt#13| ((state |cnt_s|)) (_ BitVec 15) (bvadd (|cnt#3| state) #b000000000000001)) ; $add$cnt.v:16$6_Y [14:0]
(define-fun |cnt#14| ((state |cnt_s|)) (_ BitVec 15) (ite (|cnt#4| state) #b000000000000000 (|cnt#13| state))) ; $ternary$cnt.v:16$7_Y [14:0]
(define-fun |cnt#15| ((state |cnt_s|)) (_ BitVec 15) (ite (|cnt#6| state) #b000000000000000 (|cnt#14| state))) ; $0\cnt[14:0]
(define-fun |cnt#16| ((state |cnt_s|)) (_ BitVec 15) (ite (|cnt#4| state) (|cnt#5| state) (|cnt#1| state))) ; $ternary$cnt.v:14$2_Y
(define-fun |cnt#17| ((state |cnt_s|)) (_ BitVec 15) (ite (|cnt#6| state) #b000000000000000 (|cnt#16| state))) ; $0\base[14:0]
(define-fun |cnt#18| ((state |cnt_s|)) (_ BitVec 15) (bvadd (|cnt#0| state) #b000000000000001)) ; $add$cnt.v:15$3_Y
(define-fun |cnt#19| ((state |cnt_s|)) (_ BitVec 15) (ite (|cnt#4| state) (|cnt#5| state) (|cnt#18| state))) ; $ternary$cnt.v:15$5_Y [14:0]
(define-fun |cnt#20| ((state |cnt_s|)) (_ BitVec 15) (ite (|cnt#6| state) #b000000000000000 (|cnt#19| state))) ; $0\addr[14:0]
(define-fun |cnt_a| ((state |cnt_s|)) Bool 
  (|cnt_a 0| state)
)
(define-fun |cnt_u| ((state |cnt_s|)) Bool true)
(define-fun |cnt_i| ((state |cnt_s|)) Bool (and
  (= (|cnt#0| state) #b000000000000000) ; addr
  (= (|cnt#1| state) #b000000000000000) ; base
  (= (|cnt#3| state) #b000000000000000) ; cnt
))
(define-fun |cnt_h| ((state |cnt_s|)) Bool true)
(define-fun |cnt_t| ((state |cnt_s|) (next_state |cnt_s|)) Bool (and
  (= (|cnt#15| state) (|cnt#3| next_state)) ; $procdff$24 \cnt
  (= (|cnt#17| state) (|cnt#1| next_state)) ; $procdff$25 \base
  (= (|cnt#20| state) (|cnt#0| next_state)) ; $procdff$26 \addr
)) ; end of module cnt
; yosys-smt2-topmod cnt
; end of yosys output



(declare-rel INV (|cnt_s|))
(declare-rel fail ())


(declare-var |__S__| |cnt_s|)
(declare-var |__S'__| |cnt_s|)


; init => inv
(rule (=> (|cnt_i| |__S__|)
  (INV |__S__|)))

; inv /\ T => inv
(rule (=> (and 
  (INV |__S__|)   
  (|cnt_t| |__S__| |__S'__|)) 
  (INV |__S'__|)))

; inv /\ ~p => \bot
(rule (=> (and 
  (INV |__S__|)   
  (not (|cnt_a| |__S__|)))
  fail))


(query fail :print-certificate true)
