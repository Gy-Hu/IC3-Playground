; by changing Fminus2 to init
; you have a chance to win
; but you cannot guarantee F-> INV
; or F/\T-> INV
; have to check
; but you know INIT -> INV
; and INIT /\ T -> INV
; are also necessary, but not sufficient

(set-logic BV)



(synth-fun INV 
   ((addr (_ BitVec 4)) (base (_ BitVec 4)) (cnt (_ BitVec 4)) (inp (_ BitVec 4)) (lden (_ BitVec 1))) Bool
( (Conj Bool) (Disj Bool) (Literal Bool) (Atom Bool)
  (E4 (_ BitVec 4)) (V4 (_ BitVec 4)) (C4 (_ BitVec 4)) (Arithm4 (_ BitVec 4)) (E1 (_ BitVec 1)) (V1 (_ BitVec 1))
)
(
    (Conj Bool (Disj 
                (and Disj Conj)))
    (Disj Bool (Literal 
                (or Literal Disj)))
    (Literal Bool (Atom
                (not Atom)))
    (Atom Bool (
      (= E4 E4) (= E1 E1)
      ))
      (E4 (_ BitVec 4) (V4 C4 Arithm4 ))
(V4 (_ BitVec 4) (base addr cnt inp))
(C4 (_ BitVec 4) (#b0001 #b1000))
(Arithm4 (_ BitVec 4) ((bvadd E4 E4)))
(E1 (_ BitVec 1) (V1 ))
(V1 (_ BitVec 1) (lden))

   ))


(define-fun Fminus2 ((addr (_ BitVec 4)) (base (_ BitVec 4)) (cnt (_ BitVec 4)) (inp (_ BitVec 4)) (lden (_ BitVec 1))) Bool (and (not (and (= base #b1000) (not (= addr base)))) (not (and (= base #b1000) (= cnt #b0010))) (not (and (= cnt #b0001) (= base #b1000))) (not (and (= base #b1000) (= cnt #b1111)))))
(define-fun Tr ((addr (_ BitVec 4)) (base (_ BitVec 4)) (cnt (_ BitVec 4)) (inp (_ BitVec 4)) (lden (_ BitVec 1)) (addr_prime (_ BitVec 4)) (base_prime (_ BitVec 4)) (cnt_prime (_ BitVec 4)) (inp_prime (_ BitVec 4)) (lden_prime (_ BitVec 1))) Bool (and (and (= base_prime (ite (= lden #b1) inp base)) (= addr_prime (ite (= lden #b1) inp (bvadd addr #b0001)))) (= cnt_prime (ite (= lden #b1) #b0000 (bvadd cnt #b0001)))))

 (define-fun Init ((addr (_ BitVec 4)) (base (_ BitVec 4)) (cnt (_ BitVec 4)) (inp (_ BitVec 4)) (lden (_ BitVec 1)))  Bool 
     (and (= #b0000 addr)
          (= #b0000 base)
          (= #b0000 cnt)
     )
 )


(declare-var addrV (_ BitVec 4))
(declare-var baseV (_ BitVec 4))
(declare-var cntV (_ BitVec 4))
(declare-var inpV (_ BitVec 4))
(declare-var ldenV (_ BitVec 1))
(declare-var addrP (_ BitVec 4))
(declare-var baseP (_ BitVec 4))
(declare-var cntP (_ BitVec 4))
(declare-var inpP (_ BitVec 4))
(declare-var ldenP (_ BitVec 1))

(constraint (not (INV #b0000 #b1000 #b0000 #b0000 #b0)))
(constraint (not (INV #b1000 #b1000 #b0010 #b0000 #b0)))
(constraint (not (INV #b1001 #b1000 #b0000 #b1010 #b0)))
(constraint (not (INV #b1001 #b1000 #b0011 #b1000 #b0)))
(constraint (INV #b1001 #b1000 #b0001 #b1000 #b0))

; so you can make it the similar way... ? no, you need to care about the relational init case
; (constraint (INV #b0000 #b0000 #b0000 inpV ldenV))   ; using this one takes 9s
; using the below one also takes 9s
(constraint (=> (and (Init addrV baseV cntV inpV ldenV) (Tr addrV baseV cntV inpV ldenV addrP baseP cntP inpP ldenP)) (INV addrP baseP cntP inpP ldenP)))
(constraint (=> (Init addrP baseP cntP inpP ldenP) (INV addrP baseP cntP inpP ldenP)))

(check-synth)


;~/cvc-installs/latest/bin/cvc4 --lang=sygus2 idx-init.sygus 
;unsat
;(define-fun INV ((addr (_ BitVec 4)) (base (_ BitVec 4)) (cnt (_ BitVec 4)) (inp (_ BitVec 4)) (lden (_ BitVec 1))) Bool (= (bvadd base cnt) addr))
