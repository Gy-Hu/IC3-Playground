; remove variables
; make init
; change Fminus2 to a simple form
;   - will work
;   - complex form will not

(set-logic BV)



(synth-fun INV 
   ((addr (_ BitVec 4)) (base (_ BitVec 4)) (cnt (_ BitVec 4))) Bool
( (Conj Bool) (Disj Bool) (Literal Bool) (Atom Bool)
  (E4 (_ BitVec 4)) (V4 (_ BitVec 4)) (C4 (_ BitVec 4)) (Arithm4 (_ BitVec 4))
)
(
    (Conj Bool (Disj 
                (and Disj Conj)))
    (Disj Bool (Literal 
                (or Literal Disj)))
    (Literal Bool (Atom
                (not Atom)))
    (Atom Bool (
      (= E4 E4)
      ))
      (E4 (_ BitVec 4) (V4 C4 Arithm4 ))
(V4 (_ BitVec 4) (base addr cnt))
(C4 (_ BitVec 4) (#b1000 #b0001))
(Arithm4 (_ BitVec 4) ((bvadd E4 E4)))


   ))


; (define-fun Init ((addr (_ BitVec 4)) (base (_ BitVec 4)) (cnt (_ BitVec 4)) (inp (_ BitVec 4)) (lden (_ BitVec 1))) ; Bool 
;     (and (= #b0000 addr)
;          (= #b0000 base)
;          (= #b0000 cnt)
;     )
; )

(define-fun Init ((addr (_ BitVec 4)) (base (_ BitVec 4)) (cnt (_ BitVec 4)) (inp (_ BitVec 4)) (lden (_ BitVec 1))) Bool 
  (and 
    (not (and (= base #b1000) (not (= addr base)))) 
    (not (and (= base #b1000) (= cnt #b0010))) 
    (not (and (= cnt #b0001) (= base #b1000))) 
    (not (and (= base #b1000) (= cnt #b1111))))
)
         
(define-fun Tr ((addr (_ BitVec 4)) (base (_ BitVec 4)) (cnt (_ BitVec 4)) (inp (_ BitVec 4)) (lden (_ BitVec 1)) (addr_prime (_ BitVec 4)) (base_prime (_ BitVec 4)) (cnt_prime (_ BitVec 4)) (inp_prime (_ BitVec 4)) (lden_prime (_ BitVec 1))) Bool 
    (and (and (= base_prime (ite (= lden #b1) inp base)) 
              (= addr_prime (ite (= lden #b1) inp (bvadd addr #b0001)))) 
              (= cnt_prime (ite (= lden #b1) #b0000 (bvadd cnt #b0001)))))

(declare-var addrV (_ BitVec 4))
(declare-var baseV (_ BitVec 4))
(declare-var cntV (_ BitVec 4))
(declare-var inpV (_ BitVec 4))
(declare-var ldenV (_ BitVec 1))
(declare-var addrP (_ BitVec 4))
(declare-var baseP (_ BitVec 4))
(declare-var cntP (_ BitVec 4))
(declare-var inpP (_ BitVec 4))
(declare-var ldenP (_ BitVec 1))

(constraint (not (INV #b0000 #b1000 #b0000)))
(constraint (not (INV #b1000 #b1000 #b0010)))
(constraint (not (INV #b1001 #b1000 #b0000)))
(constraint (not (INV #b1001 #b1000 #b0011)))
(constraint (INV #b1001 #b1000 #b0001))
(constraint (=> (and (Init addrV baseV cntV inpV ldenV) (Tr addrV baseV cntV inpV ldenV addrP baseP cntP inpP ldenP)) (INV addrP baseP cntP)))
(constraint (=> (Init addrP baseP cntP inpP ldenP) (INV addrP baseP cntP)))

(check-synth)

