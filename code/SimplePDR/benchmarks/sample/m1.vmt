; Model with C = {p1}
(declare-fun x () Bool)
(declare-fun y () Bool)
(declare-fun z () Bool)
(declare-fun nx () Bool)
(declare-fun ny () Bool)
(declare-fun nz () Bool)
(define-fun .sv0 () Bool (! x :next nx))
(define-fun .sv1 () Bool (! y :next ny))
(define-fun .sv2 () Bool (! z :next nz))
(define-fun .init () Bool (! (and (not x) (not y) (not z)) :init true))
(define-fun .trans () Bool (! (or (and (not x) (not y) (not z) (not nx) ny (not nz))
                                  (and (not x) (not y) z (not nx) ny (not nz))
                                  (and (not x) y (not z) (not nx) ny nz)
                                  (and (not x) y (not z) nx (not ny) (not nz))
                                  (and (not x) y (not z) nx (not ny) nz)
                                  (and (not x) y z (not nx) (not ny) (not nz))
                                  (and (not x) y z (not nx) (not ny) nz)
                                  (and x (not y) (not z) nx (not ny) nz)
                                  (and x (not y) z (not nx) ny nz)) :trans true))
(define-fun .invar () Bool (! (not (and x (not y) (not z))) :invar-property 0))