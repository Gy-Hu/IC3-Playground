(declare-fun at-main@orig.main.exit.split () Bool)
(declare-fun at-main@orig.main.exit.split+ () Bool)
(define-fun .def0 () Bool (! at-main@orig.main.exit.split :next at-main@orig.main.exit.split+))
(declare-fun main@.lr.ph-place-2 () Int)
(declare-fun main@.lr.ph-place-2+ () Int)
(define-fun .def1 () Int (! main@.lr.ph-place-2 :next main@.lr.ph-place-2+))
(declare-fun main@.lr.ph-place-1 () Int)
(declare-fun main@.lr.ph-place-1+ () Int)
(define-fun .def2 () Int (! main@.lr.ph-place-1 :next main@.lr.ph-place-1+))
(declare-fun at-main@.lr.ph () Bool)
(declare-fun at-main@.lr.ph+ () Bool)
(define-fun .def3 () Bool (! at-main@.lr.ph :next at-main@.lr.ph+))
(declare-fun main@.lr.ph-place-0 () Int)
(declare-fun main@.lr.ph-place-0+ () Int)
(define-fun .def4 () Int (! main@.lr.ph-place-0 :next main@.lr.ph-place-0+))
(declare-fun verifier.error-place-2 () Bool)
(declare-fun verifier.error-place-2+ () Bool)
(define-fun .def5 () Bool (! verifier.error-place-2 :next verifier.error-place-2+))
(declare-fun verifier.error-place-1 () Bool)
(declare-fun verifier.error-place-1+ () Bool)
(define-fun .def6 () Bool (! verifier.error-place-1 :next verifier.error-place-1+))
(declare-fun at-main@entry () Bool)
(declare-fun at-main@entry+ () Bool)
(define-fun .def7 () Bool (! at-main@entry :next at-main@entry+))
(declare-fun verifier.error-place-0 () Bool)
(declare-fun verifier.error-place-0+ () Bool)
(define-fun .def8 () Bool (! verifier.error-place-0 :next verifier.error-place-0+))
(declare-fun at-verifier.error () Bool)
(declare-fun at-verifier.error+ () Bool)
(define-fun .def9 () Bool (! at-verifier.error :next at-verifier.error+))
; 16 inputs
(declare-fun int-input-8 () Int)
(declare-fun int-input-7 () Int)
(declare-fun int-input-6 () Int)
(declare-fun int-input-1 () Int)
(declare-fun int-input-2 () Int)
(declare-fun int-input-5 () Int)
(declare-fun int-input-0 () Int)
(declare-fun int-input-3 () Int)
(declare-fun bool-input-1 () Bool)
(declare-fun bool-input-4 () Bool)
(declare-fun bool-input-3 () Bool)
(declare-fun int-input-4 () Int)
(declare-fun bool-input-0 () Bool)
(declare-fun bool-input-2 () Bool)
(declare-fun bool-input-5 () Bool)
(declare-fun bool-input-6 () Bool)
(define-fun .def10 () Bool (! (and (not at-main@orig.main.exit.split)
     (not at-main@.lr.ph)
     (not at-main@entry)
     (not at-verifier.error)) :init true))
(define-fun .def11 () Bool (! (let ((a!1 (and at-main@entry
                true
                (= bool-input-1 (> int-input-0 0))
                bool-input-1
                (= bool-input-0 (> int-input-1 int-input-0))
                bool-input-0
                (=> bool-input-5 (and bool-input-5 bool-input-2))
                (=> (and bool-input-5 bool-input-2) (not bool-input-1))
                (=> (and bool-input-5 bool-input-2) (= int-input-2 int-input-1))
                (=> (and bool-input-5 bool-input-2) (= int-input-3 int-input-2))
                (=> bool-input-5 (= bool-input-4 (< int-input-3 0)))
                (=> bool-input-5 (not bool-input-3))
                (=> bool-input-5 bool-input-4)
                (=> bool-input-6 (and bool-input-6 bool-input-5))
                bool-input-6
                (= main@.lr.ph-place-2+ main@.lr.ph-place-2)
                (= main@.lr.ph-place-1+ main@.lr.ph-place-1)
                (= at-main@.lr.ph+ at-main@.lr.ph)
                (= main@.lr.ph-place-0+ main@.lr.ph-place-0)
                (= verifier.error-place-2+ verifier.error-place-2)
                (= verifier.error-place-1+ verifier.error-place-1)
                (= at-main@entry+ at-main@entry)
                (= verifier.error-place-0+ verifier.error-place-0)
                (= at-verifier.error+ at-verifier.error)))
      (a!2 (and (and at-main@.lr.ph
                     (= int-input-0 main@.lr.ph-place-0)
                     (= int-input-1 main@.lr.ph-place-1))
                (= int-input-8 main@.lr.ph-place-2)
                true
                (= int-input-2 (+ int-input-0 1))
                (= int-input-3 (+ int-input-1 (- 1)))
                (= bool-input-0 (< int-input-2 int-input-8))
                (=> bool-input-2 (and bool-input-2 bool-input-1))
                (=> (and bool-input-2 bool-input-1) bool-input-0)
                (=> (and bool-input-2 bool-input-1) (= int-input-4 int-input-2))
                (=> (and bool-input-2 bool-input-1) (= int-input-5 int-input-3))
                (=> (and bool-input-2 bool-input-1) (= int-input-6 int-input-4))
                (=> (and bool-input-2 bool-input-1) (= int-input-7 int-input-5))
                bool-input-2
                (= main@.lr.ph-place-0+ int-input-6)
                (= main@.lr.ph-place-1+ int-input-7)
                (= main@.lr.ph-place-2+ int-input-8)
                (= at-main@orig.main.exit.split+ at-main@orig.main.exit.split)
                (= verifier.error-place-2+ verifier.error-place-2)
                (= verifier.error-place-1+ verifier.error-place-1)
                (= at-main@entry+ at-main@entry)
                (= verifier.error-place-0+ verifier.error-place-0)
                (= at-verifier.error+ at-verifier.error)))
      (a!3 (and (and at-main@.lr.ph
                     (= int-input-0 main@.lr.ph-place-0)
                     (= int-input-1 main@.lr.ph-place-1))
                (= int-input-3 main@.lr.ph-place-2)
                true
                (= int-input-2 (+ int-input-0 1))
                (= int-input-4 (+ int-input-1 (- 1)))
                (= bool-input-0 (< int-input-2 int-input-3))
                (=> bool-input-4 (and bool-input-4 bool-input-1))
                (=> (and bool-input-4 bool-input-1) (not bool-input-0))
                (=> (and bool-input-4 bool-input-1) (= int-input-5 int-input-4))
                (=> (and bool-input-4 bool-input-1) (= int-input-6 int-input-5))
                (=> bool-input-4 (= bool-input-3 (< int-input-6 0)))
                (=> bool-input-4 (not bool-input-2))
                (=> bool-input-4 bool-input-3)
                (=> bool-input-5 (and bool-input-5 bool-input-4))
                bool-input-5
                (= main@.lr.ph-place-2+ main@.lr.ph-place-2)
                (= main@.lr.ph-place-1+ main@.lr.ph-place-1)
                (= at-main@.lr.ph+ at-main@.lr.ph)
                (= main@.lr.ph-place-0+ main@.lr.ph-place-0)
                (= verifier.error-place-2+ verifier.error-place-2)
                (= verifier.error-place-1+ verifier.error-place-1)
                (= at-main@entry+ at-main@entry)
                (= verifier.error-place-0+ verifier.error-place-0)
                (= at-verifier.error+ at-verifier.error))))
  (or (and (= verifier.error-place-0+ false)
           (= verifier.error-place-1+ false)
           (= verifier.error-place-2+ false)
           (= at-main@orig.main.exit.split+ at-main@orig.main.exit.split)
           (= main@.lr.ph-place-2+ main@.lr.ph-place-2)
           (= main@.lr.ph-place-1+ main@.lr.ph-place-1)
           (= at-main@.lr.ph+ at-main@.lr.ph)
           (= main@.lr.ph-place-0+ main@.lr.ph-place-0)
           (= at-main@entry+ at-main@entry))
      (and (= verifier.error-place-0+ false)
           (= verifier.error-place-1+ true)
           (= verifier.error-place-2+ true)
           (= at-main@orig.main.exit.split+ at-main@orig.main.exit.split)
           (= main@.lr.ph-place-2+ main@.lr.ph-place-2)
           (= main@.lr.ph-place-1+ main@.lr.ph-place-1)
           (= at-main@.lr.ph+ at-main@.lr.ph)
           (= main@.lr.ph-place-0+ main@.lr.ph-place-0)
           (= at-main@entry+ at-main@entry))
      (and (= verifier.error-place-0+ true)
           (= verifier.error-place-1+ false)
           (= verifier.error-place-2+ true)
           (= at-main@orig.main.exit.split+ at-main@orig.main.exit.split)
           (= main@.lr.ph-place-2+ main@.lr.ph-place-2)
           (= main@.lr.ph-place-1+ main@.lr.ph-place-1)
           (= at-main@.lr.ph+ at-main@.lr.ph)
           (= main@.lr.ph-place-0+ main@.lr.ph-place-0)
           (= at-main@entry+ at-main@entry))
      (and (= verifier.error-place-0+ true)
           (= verifier.error-place-1+ true)
           (= verifier.error-place-2+ true)
           (= at-main@orig.main.exit.split+ at-main@orig.main.exit.split)
           (= main@.lr.ph-place-2+ main@.lr.ph-place-2)
           (= main@.lr.ph-place-1+ main@.lr.ph-place-1)
           (= at-main@.lr.ph+ at-main@.lr.ph)
           (= main@.lr.ph-place-0+ main@.lr.ph-place-0)
           (= at-main@entry+ at-main@entry))
      (and (= at-main@orig.main.exit.split+ at-main@orig.main.exit.split)
           (= main@.lr.ph-place-2+ main@.lr.ph-place-2)
           (= main@.lr.ph-place-1+ main@.lr.ph-place-1)
           (= at-main@.lr.ph+ at-main@.lr.ph)
           (= main@.lr.ph-place-0+ main@.lr.ph-place-0)
           (= verifier.error-place-2+ verifier.error-place-2)
           (= verifier.error-place-1+ verifier.error-place-1)
           (= verifier.error-place-0+ verifier.error-place-0)
           (= at-verifier.error+ at-verifier.error))
      (and at-main@entry
           true
           (= bool-input-1 (> int-input-5 0))
           bool-input-1
           (= bool-input-0 (> int-input-0 int-input-5))
           bool-input-0
           (=> bool-input-3 (and bool-input-3 bool-input-2))
           (=> (and bool-input-3 bool-input-2) bool-input-1)
           (=> (and bool-input-3 bool-input-2) (= int-input-1 0))
           (=> (and bool-input-3 bool-input-2) (= int-input-2 int-input-0))
           (=> (and bool-input-3 bool-input-2) (= int-input-3 int-input-1))
           (=> (and bool-input-3 bool-input-2) (= int-input-4 int-input-2))
           bool-input-3
           (= main@.lr.ph-place-0+ int-input-3)
           (= main@.lr.ph-place-1+ int-input-4)
           (= main@.lr.ph-place-2+ int-input-5)
           (= at-main@orig.main.exit.split+ at-main@orig.main.exit.split)
           (= verifier.error-place-2+ verifier.error-place-2)
           (= verifier.error-place-1+ verifier.error-place-1)
           (= at-main@entry+ at-main@entry)
           (= verifier.error-place-0+ verifier.error-place-0)
           (= at-verifier.error+ at-verifier.error))
      a!1
      a!2
      a!3)) :trans true))
(define-fun .def12 () Bool (! (not at-main@orig.main.exit.split) :invar-property 0))
